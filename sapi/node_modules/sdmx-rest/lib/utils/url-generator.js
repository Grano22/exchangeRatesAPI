// Generated by CoffeeScript 2.5.1
(function() {
  var ApiResources, ApiVersion, Generator, MetadataDetail, MetadataReferences, MetadataReferencesExcluded, MetadataReferencesSpecial, checkApiVersion, checkDetail, checkMultipleItems, checkReferences, checkResource, createAvailabilityQuery, createDataQuery, createEntryPoint, createMetadataQuery, createSchemaQuery, createShortAvailabilityQuery, createShortDataQuery, createShortMetadataQuery, createShortSchemaQuery, excluded, generator, handleAvailabilityPathParams, handleAvailabilityQuery, handleAvailabilityQueryParams, handleDataPathParams, handleDataQuery, handleDataQueryParams, handleMetaPathParams, handleMetaQueryParams, handleMetadataQuery, handleSchemaQuery, handleSchemaQueryParams, hasHistory, isItemScheme, itemAllowed,
    indexOf = [].indexOf;

  ({ApiVersion} = require('../utils/api-version'));

  ({ApiResources} = require('../utils/api-version'));

  ({isItemScheme} = require('../metadata/metadata-type'));

  ({MetadataDetail} = require('../metadata/metadata-detail'));

  ({MetadataReferences} = require('../metadata/metadata-references'));

  ({MetadataReferencesExcluded} = require('../metadata/metadata-references'));

  ({MetadataReferencesSpecial} = require('../metadata/metadata-references'));

  itemAllowed = function(resource, api) {
    return api !== ApiVersion.v1_0_0 && api !== ApiVersion.v1_0_1 && api !== ApiVersion.v1_0_2 && ((resource !== 'hierarchicalcodelist' && isItemScheme(resource)) || (api !== ApiVersion.v1_1_0 && resource === 'hierarchicalcodelist'));
  };

  createEntryPoint = function(s) {
    var url;
    if (!s.url) {
      throw ReferenceError(`${s.url} is not a valid service`);
    }
    url = s.url;
    if (!s.url.endsWith('/')) {
      url = s.url + '/';
    }
    return url;
  };

  createDataQuery = function(query, service) {
    var url;
    url = createEntryPoint(service);
    url += `data/${query.flow}/${query.key}/${query.provider}?`;
    if (query.obsDimension) {
      url += `dimensionAtObservation=${query.obsDimension}&`;
    }
    url += `detail=${query.detail}`;
    if (service.api !== ApiVersion.v1_0_0 && service.api !== ApiVersion.v1_0_1 && service.api !== ApiVersion.v1_0_2) {
      url += `&includeHistory=${query.history}`;
    }
    if (query.start) {
      url += `&startPeriod=${query.start}`;
    }
    if (query.end) {
      url += `&endPeriod=${query.end}`;
    }
    if (query.updatedAfter) {
      url += `&updatedAfter=${query.updatedAfter}`;
    }
    if (query.firstNObs) {
      url += `&firstNObservations=${query.firstNObs}`;
    }
    if (query.lastNObs) {
      url += `&lastNObservations=${query.lastNObs}`;
    }
    return url;
  };

  handleDataPathParams = function(q) {
    var path;
    path = [];
    if (q.provider !== 'all') {
      path.push(q.provider);
    }
    if (q.key !== 'all' || path.length) {
      path.push(q.key);
    }
    if (path.length) {
      return '/' + path.reverse().join('/');
    } else {
      return '';
    }
  };

  hasHistory = function(q, s) {
    if (s.api !== ApiVersion.v1_0_0 && s.api !== ApiVersion.v1_0_1 && s.api !== ApiVersion.v1_0_2 && q.history) {
      return true;
    } else {
      return false;
    }
  };

  handleDataQueryParams = function(q, s) {
    var p;
    p = [];
    if (q.obsDimension) {
      p.push(`dimensionAtObservation=${q.obsDimension}`);
    }
    if (q.detail !== 'full') {
      p.push(`detail=${q.detail}`);
    }
    if (hasHistory(q, s)) {
      p.push(`includeHistory=${q.history}`);
    }
    if (q.start) {
      p.push(`startPeriod=${q.start}`);
    }
    if (q.end) {
      p.push(`endPeriod=${q.end}`);
    }
    if (q.updatedAfter) {
      p.push(`updatedAfter=${q.updatedAfter}`);
    }
    if (q.firstNObs) {
      p.push(`firstNObservations=${q.firstNObs}`);
    }
    if (q.lastNObs) {
      p.push(`lastNObservations=${q.lastNObs}`);
    }
    if (p.length > 0) {
      return '?' + p.reduceRight(function(x, y) {
        return x + '&' + y;
      });
    } else {
      return '';
    }
  };

  createShortDataQuery = function(q, s) {
    var u;
    u = createEntryPoint(s);
    u += `data/${q.flow}`;
    u += handleDataPathParams(q);
    u += handleDataQueryParams(q, s);
    return u;
  };

  createMetadataQuery = function(query, service) {
    var url;
    url = createEntryPoint(service);
    url += `${query.resource}/${query.agency}/${query.id}/${query.version}`;
    if (itemAllowed(query.resource, service.api)) {
      url += `/${query.item}`;
    }
    url += `?detail=${query.detail}&references=${query.references}`;
    return url;
  };

  handleMetaPathParams = function(q, s, u) {
    var path;
    path = [];
    if (q.item !== 'all' && itemAllowed(q.resource, s.api)) {
      path.push(q.item);
    }
    if (q.version !== 'latest' || path.length) {
      path.push(q.version);
    }
    if (q.id !== 'all' || path.length) {
      path.push(q.id);
    }
    if (q.agency !== 'all' || path.length) {
      path.push(q.agency);
    }
    if (path.length) {
      u = u + '/' + path.reverse().join('/');
    }
    return u;
  };

  handleMetaQueryParams = function(q, u, hd, hr) {
    if (hd || hr) {
      u += '?';
    }
    if (hd) {
      u += `detail=${q.detail}`;
    }
    if (hd && hr) {
      u += '&';
    }
    if (hr) {
      u += `references=${q.references}`;
    }
    return u;
  };

  createShortMetadataQuery = function(q, s) {
    var u;
    u = createEntryPoint(s);
    u += `${q.resource}`;
    u = handleMetaPathParams(q, s, u);
    u = handleMetaQueryParams(q, u, q.detail !== MetadataDetail.FULL, q.references !== MetadataReferences.NONE);
    return u;
  };

  createAvailabilityQuery = function(q, s) {
    var url;
    url = createEntryPoint(s);
    url += 'availableconstraint';
    url += `/${q.flow}/${q.key}/${q.provider}/${q.component}`;
    url += `?mode=${q.mode}&references=${q.references}`;
    if (q.start) {
      url += `&startPeriod=${q.start}`;
    }
    if (q.end) {
      url += `&endPeriod=${q.end}`;
    }
    if (q.updatedAfter) {
      url += `&updatedAfter=${q.updatedAfter}`;
    }
    return url;
  };

  handleAvailabilityPathParams = function(q) {
    var path;
    path = [];
    if (q.component !== 'all') {
      path.push(q.component);
    }
    if (q.provider !== 'all' || path.length) {
      path.push(q.provider);
    }
    if (q.key !== 'all' || path.length) {
      path.push(q.key);
    }
    if (path.length) {
      return '/' + path.reverse().join('/');
    } else {
      return '';
    }
  };

  handleAvailabilityQueryParams = function(q) {
    var p;
    p = [];
    if (q.updatedAfter) {
      p.push(`updatedAfter=${q.updatedAfter}`);
    }
    if (q.end) {
      p.push(`endPeriod=${q.end}`);
    }
    if (q.start) {
      p.push(`startPeriod=${q.start}`);
    }
    if (q.mode !== 'exact') {
      p.push(`mode=${q.mode}`);
    }
    if (q.references !== 'none') {
      p.push(`references=${q.references}`);
    }
    if (p.length > 0) {
      return '?' + p.reduceRight(function(x, y) {
        return x + '&' + y;
      });
    } else {
      return '';
    }
  };

  createShortAvailabilityQuery = function(q, s) {
    var u;
    u = createEntryPoint(s);
    u += `availableconstraint/${q.flow}`;
    u += handleAvailabilityPathParams(q);
    u += handleAvailabilityQueryParams(q);
    return u;
  };

  createSchemaQuery = function(q, s) {
    var u;
    u = createEntryPoint(s);
    u += `schema/${q.context}/${q.agency}/${q.id}/${q.version}`;
    u += `?explicitMeasure=${q.explicit}`;
    if (q.obsDimension) {
      u += `&dimensionAtObservation=${q.obsDimension}`;
    }
    return u;
  };

  handleSchemaQueryParams = function(q) {
    var p;
    p = [];
    if (q.obsDimension) {
      p.push(`dimensionAtObservation=${q.obsDimension}`);
    }
    if (q.explicit) {
      p.push(`explicitMeasure=${q.explicit}`);
    }
    if (p.length > 0) {
      return '?' + p.reduceRight(function(x, y) {
        return x + '&' + y;
      });
    } else {
      return '';
    }
  };

  createShortSchemaQuery = function(q, s) {
    var u;
    u = createEntryPoint(s);
    u += `schema/${q.context}/${q.agency}/${q.id}`;
    if (q.version !== 'latest') {
      u += `/${q.version}`;
    }
    u += handleSchemaQueryParams(q);
    return u;
  };

  excluded = [ApiVersion.v1_0_0, ApiVersion.v1_0_1, ApiVersion.v1_0_2, ApiVersion.v1_1_0, ApiVersion.v1_2_0];

  checkMultipleItems = function(i, s, r) {
    var ref;
    if ((ref = s.api, indexOf.call(excluded, ref) >= 0) && /\+/.test(i)) {
      throw Error(`Multiple ${r} not allowed in ${s.api}`);
    }
  };

  checkApiVersion = function(q, s) {
    checkMultipleItems(q.agency, s, 'agencies');
    checkMultipleItems(q.id, s, 'IDs');
    checkMultipleItems(q.version, s, 'versions');
    return checkMultipleItems(q.item, s, 'items');
  };

  checkDetail = function(q, s) {
    var ref;
    if ((ref = s.api, indexOf.call(excluded, ref) >= 0) && (q.detail === 'referencepartial' || q.detail === 'allcompletestubs' || q.detail === 'referencecompletestubs')) {
      throw Error(`${q.detail} not allowed in ${s.api}`);
    }
  };

  checkResource = function(q, s) {
    var api, ref;
    if (s && s.api) {
      api = s.api.replace(/\./g, '_');
      if (ref = q.resource, indexOf.call(ApiResources[api], ref) < 0) {
        throw Error(`${q.resource} not allowed in ${s.api}`);
      }
    }
  };

  checkReferences = function(q, s) {
    var api, ref, ref1, ref2;
    if (s && s.api) {
      api = s.api.replace(/\./g, '_');
      if (!(((ref = q.references, indexOf.call(ApiResources[api], ref) >= 0) || (ref1 = q.references, indexOf.call(Object.values(MetadataReferencesSpecial), ref1) >= 0)) && (ref2 = q.references, indexOf.call(MetadataReferencesExcluded, ref2) < 0))) {
        throw Error(`${q.references} not allowed as reference in ${s.api}`);
      }
    }
  };

  handleAvailabilityQuery = function(qry, srv, skip) {
    var ref;
    if (ref = srv.api, indexOf.call(excluded, ref) >= 0) {
      throw Error(`Availability query not supported in ${srv.api}`);
    } else if (skip) {
      return createShortAvailabilityQuery(qry, srv);
    } else {
      return createAvailabilityQuery(qry, srv);
    }
  };

  handleDataQuery = function(qry, srv, skip) {
    checkMultipleItems(qry.provider, srv, 'providers');
    if (skip) {
      return createShortDataQuery(qry, srv);
    } else {
      return createDataQuery(qry, srv);
    }
  };

  handleMetadataQuery = function(qry, srv, skip) {
    checkApiVersion(qry, srv);
    checkDetail(qry, srv);
    checkResource(qry, srv);
    if (qry.references) {
      checkReferences(qry, srv);
    }
    if (skip) {
      return createShortMetadataQuery(qry, srv);
    } else {
      return createMetadataQuery(qry, srv);
    }
  };

  handleSchemaQuery = function(qry, srv, skip) {
    if (skip) {
      return createShortSchemaQuery(qry, srv);
    } else {
      return createSchemaQuery(qry, srv);
    }
  };

  generator = Generator = class Generator {
    getUrl(query1, service, skipDefaults) {
      var ref, ref1, ref2, ref3;
      this.query = query1;
      this.service = service != null ? service : ApiVersion.LATEST;
      if (((ref = this.query) != null ? ref.mode : void 0) != null) {
        return handleAvailabilityQuery(this.query, this.service, skipDefaults);
      } else if (((ref1 = this.query) != null ? ref1.flow : void 0) != null) {
        return handleDataQuery(this.query, this.service, skipDefaults);
      } else if (((ref2 = this.query) != null ? ref2.resource : void 0) != null) {
        return handleMetadataQuery(this.query, this.service, skipDefaults);
      } else if (((ref3 = this.query) != null ? ref3.context : void 0) != null) {
        return handleSchemaQuery(this.query, this.service, skipDefaults);
      } else {
        throw TypeError(`${this.query} is not a valid SDMX data, metadata or availability query`);
      }
    }

  };

  exports.UrlGenerator = generator;

}).call(this);
