// Generated by CoffeeScript 2.5.1
(function() {
  var FlowRefType, IDType, IDTypeAlone, MultipleAgenciesRefType, MultipleIDType, MultipleNestedIDType, MultipleProviderRefType, MultipleVersionsType, NCNameIDType, NCNameIDTypeAlone, NestedIDType, NestedIDTypeAlone, NestedNCNameIDType, NestedNCNameIDTypeAlone, ProviderRefType, ReportingPeriodType, SeriesKeyType, SingleVersionType, SingleVersionTypeAlone, VersionNumber, VersionType, VersionTypeAlone;

  NCNameIDType = /[A-Za-z][A-Za-z0-9_-]*/; // Must begin with a letter
  // May be followed by letters, numbers, _ or -

  NCNameIDTypeAlone = RegExp(`^${NCNameIDType.source}$`);

  NestedNCNameIDType = RegExp(`${NCNameIDType.source // An ID
  // May be followed by a dot and other IDs
}(\\.${NCNameIDType.source})*`);

  NestedNCNameIDTypeAlone = RegExp(`^${NestedNCNameIDType.source}$`);

  IDType = /[A-Za-z0-9_@$-]+/; // Letters, numbers, _, @, $ or -

  IDTypeAlone = RegExp(`^${IDType.source}$`);

  VersionNumber = /[0-9]+(\.[0-9]+)*/; // A version number (e.g. 1.0)

  VersionType = RegExp(`(all|latest|${VersionNumber.source // Starts the OR clause
  // The string all
  // Or the string latest
  // Or a version number
  // Ends the OR clause
})`);

  SingleVersionType = RegExp(`(latest|${VersionNumber.source // Starts the OR clause
  // the string latest
  // Or a version number
  // Ends the OR clause
})`);

  SingleVersionTypeAlone = RegExp(`^${SingleVersionType.source}$`);

  VersionTypeAlone = RegExp(`^${VersionType.source}$`);

  NestedIDType = /[A-Za-z0-9_@$-]+(\.[A-Za-z0-9_@$-]+)*/; // Letters, numbers, _, @, $ or -
  // Potentially hierarchical (e.g. A.B.C)

  NestedIDTypeAlone = RegExp(`^${NestedIDType.source}$`);

  SeriesKeyType = RegExp(`^(${IDType.source // One or more dimension values
  // separated by a +
  // Potentially followed by a dot
  // and repeating above pattern
}([+]${IDType.source})*)?([.](${IDType.source}([+]${IDType.source})*)?)*$`);

  FlowRefType = RegExp(`^(${IDType.source}|(${NestedNCNameIDType.source},${IDType.source}(,(latest|(${VersionNumber.source})))?))$`);

  ProviderRefType = RegExp(`(${NestedNCNameIDType.source // May start with the agency owning the scheme
  // The id of the provider
},)?${IDType.source}`);

  MultipleProviderRefType = RegExp(`^(${ProviderRefType.source}([+]${ProviderRefType.source})*)$`);

  MultipleAgenciesRefType = RegExp(`^(${NestedNCNameIDType.source}([+]${NestedNCNameIDType.source})*)$`);

  MultipleIDType = RegExp(`^${IDType.source}([+]${IDType.source})*$`);

  MultipleNestedIDType = RegExp(`^${NestedIDType.source}([+]${NestedIDType.source})*$`);

  MultipleVersionsType = RegExp(`^${VersionType.source}([+]${VersionType.source})*$`);

  ReportingPeriodType = /^\d{4}-([ASTQ]\d{1}|[MW]\d{2}|[D]\d{3})$/;

  exports.NCNameIDType = NCNameIDTypeAlone;

  exports.NestedNCNameIDType = NestedNCNameIDTypeAlone;

  exports.IDType = IDTypeAlone;

  exports.VersionType = VersionTypeAlone;

  exports.SingleVersionType = SingleVersionTypeAlone;

  exports.NestedIDType = NestedIDTypeAlone;

  exports.FlowRefType = FlowRefType;

  exports.ProviderRefType = ProviderRefType;

  exports.MultipleProviderRefType = MultipleProviderRefType;

  exports.AgenciesRefType = MultipleAgenciesRefType;

  exports.ReportingPeriodType = ReportingPeriodType;

  exports.SeriesKeyType = SeriesKeyType;

  exports.MultipleIDType = MultipleIDType;

  exports.MultipleVersionsType = MultipleVersionsType;

  exports.MultipleNestedIDType = MultipleNestedIDType;

}).call(this);
